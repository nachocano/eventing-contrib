/*
Copyright 2019 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package resources

import (
	"fmt"
	"regexp"
	"strings"

	sourcesv1alpha1 "github.com/knative/eventing-sources/contrib/bitbucket/pkg/apis/sources/v1alpha1"
	eventingv1alpha1 "github.com/knative/eventing/pkg/apis/eventing/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/validation"
)

const (
	// Label to get the event types generated by a particular Source object.
	eventingEventTypeLabelKey = "eventing.knative.dev/eventtype"
)

var (
	// Only allow alphanumeric, '-' or '.'.
	validChars = regexp.MustCompile(`[^-\.a-z0-9]+`)
)

func MakeEventType(source *sourcesv1alpha1.BitBucketSource, eventType string) eventingv1alpha1.EventType {
	cloudEventType := fmt.Sprintf("%s.%s", sourcesv1alpha1.BitBucketSourceEventPrefix, eventType)
	return eventingv1alpha1.EventType{
		ObjectMeta: metav1.ObjectMeta{
			GenerateName: fmt.Sprintf("%s-", toDNS1123Subdomain(cloudEventType)),
			Labels:       EventTypeLabels(source),
			Namespace:    source.Namespace,
		},
		Spec: eventingv1alpha1.EventTypeSpec{
			Type: eventType,
			// TODO should standarize how to define these ones.
			Source: source.Spec.OwnerAndRepository,
			Schema: "",
			// TODO check the Kind to not be even called if the sink is not a Broker?
			Broker: source.Spec.Sink.Name,
		},
	}
}

func toDNS1123Subdomain(cloudEventType string) string {
	// If it is not a valid DNS1123 subdomain, make it a valid one.
	if msgs := validation.IsDNS1123Subdomain(cloudEventType); len(msgs) != 0 {
		// If the length exceeds the max, cut it and leave some room for the generated UUID.
		if len(cloudEventType) > validation.DNS1123SubdomainMaxLength {
			cloudEventType = cloudEventType[:validation.DNS1123SubdomainMaxLength-10]
		}
		cloudEventType = strings.ToLower(cloudEventType)
		cloudEventType = validChars.ReplaceAllString(cloudEventType, "")
		// Only start/end with alphanumeric.
		cloudEventType = strings.Trim(cloudEventType, "-.")
	}
	return cloudEventType
}

func EventTypeLabels(source *sourcesv1alpha1.BitBucketSource) map[string]string {
	return map[string]string{
		eventingEventTypeLabelKey: source.Name,
	}
}
